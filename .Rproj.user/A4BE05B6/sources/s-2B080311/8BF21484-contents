# Broom and dplyr
library(broom)
library(tidyverse)

data(Orange)
dim(Orange)

# Check correlation between variables
cor(Orange$age, Orange$circumference)

ggplot(Orange, aes(age, circumference, color = Tree)) +
  geom_line()

# Check for group correlations
Orange %>% 
  group_by(Tree) %>% 
  summarize(correlation = cor(age, circumference))

# Summarize information about each test
Orange %>% 
  group_by(Tree) %>% 
  do(tidy(cor.test(.$age, .$circumference)))

# In a regression model
Orange %>% 
  group_by(Tree) %>% 
  do(tidy(lm(age ~ circumference, data = .)))

# With multiple variables
rgr <- 
  mtcars %>% 
  group_by(cyl) %>% 
  do(tidy(lm(wt ~ mpg + qsec + gear, .)))
rgr

rgr_fit <- 
  mtcars %>% 
  group_by(cyl) %>% 
  do(fit = lm(wt ~ mpg + qsec + gear, .))
rgr_fit

# To call various parts of the results
rgr_fit %>% tidy(fit)
rgr_fit %>% augment(fit)



# Purrr and regressions ---------------------------------------------------

library(purrr)  
library(ggplot2)
library(dplyr)
library(broom)
library(knitr)  # for kable
data(Fair, package = "Ecdat") # extramarital affairs dataset
glimpse(Fair)

# Now run a regression where you exclude the outcome variable, and do an interative regression across the remaining values
r2s <- 
  Fair %>% 
  select(-nbaffairs) %>% 
  map(~ lm(Fair$nbaffairs ~ .x, data = Fair)) %>% 
  map(summary) %>% 
  map_dbl("r.squared") %>% 
  tidy %>% 
  arrange(desc(x))%>% 
  rename(r.squared = x)
kable(r2s)

lml <- lm(nbaffairs ~ rate, data = Fair)
summary(lml)

# Can now plot the results from the original call
ggplot(r2s, aes (x = reorder(names, r.squared), y = r.squared)) +
  geom_point(size = 5, colour = "blue")

# Keep both p-values instead
ps <- 
  Fair %>% 
  dplyr::select(-nbaffairs) %>%  # exclude outcome, leave only predictors 
  map(~lm(Fair$nbaffairs ~ .x, data = Fair)) %>% 
  map(summary) %>% 
  map(broom::tidy) %>% 
  map_df("p.value")  %>% 
  round(3) %>% 
  mutate(variable = c("intercept", "predictor"))

kable(ps)

# If you want to check all the statistics from the models, use the glance options()
# https://sebastiansauer.github.io/EDIT-multiple_lm_purrr_EDIT/

# extracting coefficients from a model
data(iris)
reg_model <- lm(Sepal.Width ~ Species, data = iris) %>% 
  tidy()

# To get residuals, use the augment argument
 lm(Sepal.Width ~ Species, data = iris) %>% 
  augment() %>% head
 
# Use glance to extract measures of fit
lm(Sepal.Width ~ Species, data = iris) %>% 
   glance() 
